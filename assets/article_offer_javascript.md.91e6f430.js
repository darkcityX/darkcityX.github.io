import{_ as s,o as a,c as n,a as l}from"./app.e22a25b6.js";const d=JSON.parse('{"title":"javascript 面试题汇总","description":"","frontmatter":{},"headers":[{"level":2,"title":"什么是异步函数","slug":"什么是异步函数","link":"#什么是异步函数","children":[]},{"level":2,"title":"微任务与宏任务","slug":"微任务与宏任务","link":"#微任务与宏任务","children":[]}],"relativePath":"article/offer/javascript.md","lastUpdated":1678155233000}'),o={name:"article/offer/javascript.md"},p=l(`<h1 id="javascript-面试题汇总" tabindex="-1">javascript 面试题汇总 <a class="header-anchor" href="#javascript-面试题汇总" aria-hidden="true">#</a></h1><h2 id="什么是异步函数" tabindex="-1">什么是异步函数 <a class="header-anchor" href="#什么是异步函数" aria-hidden="true">#</a></h2><p>js是单线程语言，同一时间只能处理一个人，如果请求得是后端，这个响应可能几秒之后才会响应，所以要先跳过这个任务，继续向下执行。这种等待主进程结束再执行的函数任务被称为异步函数。常见的异步函数有 <code>async/await</code>、<code>promise</code>、<code>定时器</code></p><h2 id="微任务与宏任务" tabindex="-1">微任务与宏任务 <a class="header-anchor" href="#微任务与宏任务" aria-hidden="true">#</a></h2><p>因为js是单线程语言，他就好比一个人再工作，但是同一时间只能做一项工作任务，所以就产生了任务队列，需要将接下来的工作都放在任务队列里面编排，干完一项任务之后再进行下一项任务。</p><p>但是任务队列还会分成三种：<code>主任务队列、微任务队列、宏任务队列</code>，每种不同的任务类型会放在不同的任务队列中，同步代码从上到下，都会放在<code>主任务队列</code>中；异步函数，如<code>seTimeout</code>、<code>setInterval</code>，属于异步任务，会放在<code>宏任务队列</code>；那么<code>微任务</code>呢，指的就是Promise通过.then()的回调。</p><p>任务的优先级为： <code>主任务队列 &gt; 微任务队列 &gt; 宏任务队列</code></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 宏任务</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">setTimeout</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 主进程</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Promise</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">成功了</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 微任务</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div>`,8),e=[p];function t(c,r,i,y,F,D){return a(),n("div",null,e)}const C=s(o,[["render",t]]);export{d as __pageData,C as default};
